package cuny.blender.englishie.algorithm.clustering;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.TreeMap;

public class ClusterDataset {
	String name;
	int dimension;
	String path;
	TreeMap<Integer, ClusterItem> items = new TreeMap<Integer, ClusterItem> ();
	ArrayList<Integer> shuffledIndexes = new ArrayList<Integer> ();
	ArrayList<PageRankItem> pageranks = new ArrayList<PageRankItem>();
	
	int seedSize; 
	int colSize;
	int dbSize;
	
	public int getSeedSize(){
		return seedSize;
	}
	
	public void setSeedSize(int seedSize){
		this.seedSize = seedSize;
	}
	
	public int getColSize(){
		return colSize;
	}
	
	public int getSize(){
		return dbSize;
	}
	
	public ArrayList<Integer> getShuffledIndexes(){
		return shuffledIndexes;
	}
	
	public void setColSize(int colSize){
		this.colSize = colSize;
	}
	
	public ClusterDataset(String name,String path, int seedSize, int colSize){
		this.name = name;
		this.path = path;
		this.seedSize = seedSize;
		this.colSize = colSize;
	}
	
	public ClusterDataset(String name,String path, int seedSize){
		this.name = name;
		this.path = path;
		this.seedSize = seedSize;
	}
	
	
	
	public String getName(){
		return this.name;
	}
	
	public String getPath(){
		return this.path;
	}
	
	public void setDimension(int dimension){
		this.dimension = dimension;
	}
	
	public int getDimension(){
		return this.dimension;
	}
	
	public TreeMap<Integer, ClusterItem> getItems(){
		return this. items;
	}
	
	public ArrayList<PageRankItem> getPageRanks() {
		return pageranks;
	}
	
	
	
	public void loadDataset(String filename) throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader(filename+".norm"));
		String line;
		line = reader.readLine();
		String[] strs = line.split("\\s+");
		setDimension(Integer.parseInt(strs[1]));
		
		//read data from the whole dataset
		int index = 0;
		while ((line = reader.readLine()) != null) {
			ClusterItem item = new ClusterItem(index, line);
			items.put(index, item);
			index++;
		}
		reader.close();
		
		dbSize = index;
		//read classid from rclass file
		reader = new BufferedReader(new FileReader(filename + ".rclass"));

		index = 0;
		while ((line = reader.readLine()) != null) {
			ClusterItem item = items.get(index);
			item.setClassId(line);
			index++;
		}
		reader.close();
	}
	
	public void writeSample(String filename, ArrayList<Integer> shuffledIndexes) throws IOException{
		StringBuffer buf = new StringBuffer();
		
		//write randomly selected "seedsize" items to a file
		int nonzeroes = 0;
		for (int i = 0; i < shuffledIndexes.size(); i++) {
			int id = shuffledIndexes.get(i);
			String content = items.get(id).getContent();
			buf.append( content + "\n");
			nonzeroes += content.split("\\s+").length;
		}
	
		PrintWriter pw = new PrintWriter(new File(filename));
		pw.println(shuffledIndexes.size() + " " + getDimension() + " " + nonzeroes / 2);
		pw.print(buf.toString());
		pw.close();

		//write classid of selected items to a file
		File fc = new File(filename + ".rclass");
		pw = new PrintWriter(fc);
		for (int i = 0; i < shuffledIndexes.size(); i++) {
			int id = shuffledIndexes.get(i);
			String classId = items.get(id).getClassId();
			pw.println(classId);
		}
	
		pw.close();
	
		//write id to a file
		File fi = new File(filename + ".index");
		pw = new PrintWriter(fi);
		for (int i = 0; i < shuffledIndexes.size(); i++) {
			pw.println(shuffledIndexes.get(i));
		}
		pw.close();
	}
	
	public void makeShuffledIndexes(){
		shuffledIndexes = new ArrayList<Integer>();
		for (int i=0;i<dbSize;i++){
			shuffledIndexes.add(i);
		}
		Collections.shuffle(shuffledIndexes);
	}
	
	public void loadPagerank(String filename) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(filename+".pagerank"));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.startsWith("#"))
				continue;
			
			String [] strs = line.split("\\s+");
			PageRankItem item = new PageRankItem(Integer.parseInt(strs[0]), Double.parseDouble(strs[1]));
			pageranks.add(item);
		}
		
		Collections.sort(pageranks,Collections.reverseOrder());

		reader.close();
	}
	
}
